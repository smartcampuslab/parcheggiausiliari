// Generated by CoffeeScript 1.4.0
(function() {

  var ORION_SUBMITTING = true;

  var FILAB = true;


  var app, connection, count, data, express, getAllData, getLastData, http_server, io, mysql, sys,
    _this = this;

  express = require('express');

  this.io = require('socket.io');

  var entity_id='Room3';

  var bodyParser = require('body-parser');
  var errorHandler = require('error-handler');
  var restler = require('restler');
  var hive = require('node-hive').for({ server:"cosmos.lab.fi-ware.org" });
  mysql = require('mysql');


  app = module.exports = express();

 
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({extended: false}));
    app.use(require('stylus').middleware({
      src: __dirname + '/public'
    }));
    app.use(express["static"](__dirname + '/public'));
 

 

  if(!FILAB) {
     connection = mysql.createConnection({
    host: 'localhost',
    user: 'fiware',
    password: 'fiware',
    database: 'fiware'
  });
  connection.connect();
  }

  count = 6;

  data = [];

  var lastBikeAVG = -1;
  var lastTime = -1;

  sys = require('util');


  


  getBikeData =  function(connection, pcId, callback) {
    var _this = this;
    console.log("querying bike data");
    if(!FILAB){
    return connection.query('SELECT m.* from `data-avg-bike` m ORDER BY m.station ASC', [pcId, pcId], function(err, rows, fields) {
      if (err) {
        throw err;
      }
      return callback(rows);
    });
  }

  if(FILAB) {
    var rows = [];
    hive.fetch("SELECT entity_f,AVG(value_f) as media FROM sc_data WHERE entity_f  NOT LIKE 'street@%%' AND entity_f NOT LIKE 'parking@%%' GROUP BY entity_f", function(err, data) {
      if (err) {
        throw err;
      }
      data.each(function(record) {
     // console.log("record " + JSON.stringify(record));
      rows.push({'station': record['entity_f'], 'avg': (Math.round(record['media'] * 100) / 100)});
  });
     
      rows.sort(function(a, b){
      return a.station.localeCompare(b.station);
    });
   // console.log("rows " + JSON.stringify(rows));
    return callback(rows);
  });
    
  }
  };

  getLastData = function(connection, pcId, callback) {
    var _this = this;
    console.log("querying for last park insert");
    if(!FILAB) {
    return connection.query('SELECT m.* from `data-pstadio` m where m.receive_timestamp=(select max(m2.receive_timestamp) from `data-pstadio` m2)', [pcId, pcId], function(err, rows, fields) {
      if (err) {
        throw err;
      }
      return callback(rows);
    });
  }
    if(FILAB) {
          var rows = [];
          
           hive.fetch("SELECT entity_f,time_f, value_f FROM sc_data WHERE entity_f='parking@rovereto@1' AND time_f > " + lastTime, function(err, data) {
        if (err) {
          throw err;
        }
        data.each(function(record) {
        if(lastTime < record['time_f']) {
          lastTime = record['time_f'];
        }
        rows.push({'entity_id': 'park', 'receive_timestamp': record['time_f'], 'attr_value': record['value_f']});
    });
      //console.log("rows " + JSON.stringify(rows));
      return callback(rows);
      });
      }
  };

  getAllData = function(connection, pcId, callback) {
    console.log("load  all park data");
       if(!FILAB) {
    return connection.query('SELECT m.* from `data-pstadio` m order by receive_timestamp asc', [pcId], function(err, rows, fields) {
      if (err) {
        throw err;
      }
      return callback(rows);
    });
    }
      if(FILAB) {
          var rows = [];
           hive.fetch("SELECT entity_f,time_f, value_f FROM sc_data WHERE entity_f='parking@rovereto@1' ORDER BY time_f ASC", function(err, data) {
        if (err) {
          throw err;
        }
        data.each(function(record) {
        //console.log("record " + JSON.stringify(record));
        rows.push({'entity_id': 'park', 'receive_timestamp': record['time_f'], 'attr_value': record['value_f']});
    });
      //console.log("rows " + JSON.stringify(rows));
      return callback(rows);
      });
      }
     };

  this.getAllDataWrapper = function(connection, pcId) {
    return getAllData(connection, pcId, function(result) {
      var item, _i, _len;
      for (_i = 0,lasten =result.length; _i < lasten; _i++) {
        item = result[_i];
        if (typeof io !== "undefined" && io !== null) {
          io.sockets.emit('chart', {
            chartData: item
          });
        }
      }
      return setInterval((function() {
        return _this.getLastDataWrapper(connection, entity_id);
      }), 30000);
    });
  };

  this.getLastDataWrapper = function(connection, pcId) {
    return getLastData(connection, pcId, function(result) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        item = result[_i];
        console.log("last "+ JSON.stringify(item));
        _results.push(typeof io !== "undefined" && io !== null ? io.sockets.emit('chart', {
          chartData: item
        }) : void 0);
      }
      return _results;
    });
  };

 this.getBikeDataMonit = function(connection, pcId) {
    return getBikeData(connection, pcId, function(result) {
      var item, _i, _len;
      item = [];
     var _results = [];
      var tmpAvg = 0;
      for (_i = 0,lasten =result.length; _i < lasten; _i++) {
        item.push(result[_i].avg);
        tmpAvg = tmpAvg + result[_i].avg;
        }
        if(lastBikeAVG < 0 || tmpAvg !== lastBikeAVG){
        console.log("Bike "+ JSON.stringify(item));
       _results.push(typeof io !== "undefined" && io !== null ? io.sockets.emit('bike-chart', {
          chartData: item
        }) : void 0);
        lastBikeAVG = tmpAvg;
       if(ORION_SUBMITTING) {
          _this.orionSubmit(lastBikeAVG);
        }
        
        } else {
          console.log("no AVG update");
        }

       return _results;
      
    });
  };


this.orionSubmit = function(value) {
   var url = 'http://localhost:1026/NGSI10/updateContext';
  var options = {
    'headers' : {'User-Agent': 'demo-frontend', 'Content-type': 'application/json', 'Accept' : 'application/json'},
     'timeout' : 60000
  }

 
  var jsonData = {};
  jsonData['contextElements']=[];
  var ctxEl = {};
  ctxEl['type']='sample-wc';
  ctxEl['isPattern']='false';
  ctxEl['id']='bikeAVG';
  ctxEl['attributes']=[{'name':'bikeAvg','type':'','value': value.toFixed(2)}];
  jsonData['contextElements'].push(ctxEl);
  jsonData['updateAction'] = 'UPDATE';


  restler.postJson(url, jsonData,options).on('timeout', function(ms){
  console.log('timeout request in sec' + ms/1000);
  }).on('complete', function(data, response) {
     if(JSON.parse(response.rawEncoded).contextResponses[0].statusCode.code == 404){
      console.log('orion update fail, trying insert...');
      jsonData['updateAction'] = 'APPEND';
      restler.postJson(url, jsonData,options).on('timeout', function(ms){
        console.log('timeout request in sec' + ms/1000);
     }).on('complete', function(data, response) {
        
        if(JSON.parse(response.rawEncoded).contextResponses[0].statusCode.code == 200){
          console.log('orion insert OK');
        } else{
          console.log('orion insert fail');
        }
      });
     }else{
      console.log('orion update OK');
     }
  }); 
};


    this.getBikeDataWrapper = function(connection, pcId) {
    getBikeData(connection, pcId, function(result) {
      var item, _i, _len;
      item = [];
      var tmpAvg = 0;
      for (_i = 0,lasten =result.length; _i < lasten; _i++) {
        item.push(result[_i].avg);
        tmpAvg = tmpAvg + result[_i].avg;
        }
        if(lastBikeAVG < 0){
          lastBikeAVG = tmpAvg;
        }
       console.log("Bike "+ JSON.stringify(item));
        if (typeof io !== "undefined" && io !== null) {
          io.sockets.emit('bike-chart', {
            chartData: item
          });
      }
    
      if(ORION_SUBMITTING) {
        _this.orionSubmit(lastBikeAVG);
      }

    });

     setInterval((function() {
        return  _this.getBikeDataMonit(connection, entity_id);
      }), 30000);
  };

  if (!module.parent) {
    http_server = app.listen(3000);
    io = this.io.listen(http_server);
    console.log("Express server listening on port %d", 3000);
  }

  io.sockets.on('connection', function(socket) {
    var mys;
    if(!FILAB){
    mys = mysql.createConnection({
      host: 'localhost',
      user: 'fiware',
      password: 'fiware',
      database: 'fiware'
    });
    mys.connect();
  }
    _this.getAllDataWrapper(mys, entity_id);
    _this.getBikeDataWrapper(mys, entity_id);
    return socket.on('disconnect', function() {});
  });

  app.get('/', function(req, res) {
    return res.render('index', {
      title: 'Dashboard'
    });
  });

}).call(this);
